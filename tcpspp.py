import sys, os, time


# Active extruders
e3dtc_active_tool = {}

# Current layer 
layer_num = 0

# GCODE strings
class GCodeFormats:
    G10 = "G10 P{tool_id} S{active_temp} R{standby_temp}\n"       # Set Tool Active and Standby Temp
    M98 = "M98 P\"{macro}\"\n"                                    # Run macro 
    M104 = "M104 S{temp} T{tool_id}\n"                            # Set Extruder Temp
    M106 = "M106 S{speed}\n"                                      # Set Fan On
    M107 = "M107\n"                                               # Set Fan Off
    M116 = "M116 P{tool_id} S5\n"                                 # Wait for Extruder Temp
    M120 = "M120\n"                                               # Absolute x/y 
    M121 = "M121\n"                                               # Relative x/y 
    G2_IJE = "G2 I{I} J{J} E{E}\n"                                # G2 - draw circle with I,J being relative center of the radius

# Gcodes generated by slicer to omit 
gcode_omit = ['M104', 'M109', 'M900']

# Env variables
ps_settings = {
    'extruder_temperature_layer0'         : os.environ['SLIC3R_FIRST_LAYER_TEMPERATURE'].split(','),
    'extruder_temperature'                : os.environ['SLIC3R_TEMPERATURE'].split(','),
    'extruder_temperature_standby_delta'  : os.environ['SLIC3R_STANDBY_TEMPERATURE_DELTA'],
    'pcfan_disable_first_layers'          : os.environ['SLIC3R_DISABLE_FAN_FIRST_LAYERS'].split(','),
    'pcfan_speed'                         : os.environ['SLIC3R_MAX_FAN_SPEED'].split(',')
}
        

# Handle the pre-layer block
def e3dtc_layer_pre(params, out_file):
    global layer_num
    layer_num = int(params['layer_num'])
    
    out_file.write("; - Generated layer commands " + str(layer_num) + "\n")
    
    
    # Temperature setup for layer 0 and following layers
    if layer_num == 0:
        # THIS IS WALKAROUND - G10 doesn't put the tool into standby (just changes temperatures)
        # There is no way to put the tool into standby explicitly so we are using this
        # and overwritting the settings with G10
        for tool, is_active in e3dtc_active_tool.items():
            out_file.write(GCodeFormats.M104.format(
                tool_id = str(tool),
                temp = (int(ps_settings['extruder_temperature_layer0'][tool]) - int(ps_settings['extruder_temperature_standby_delta']))
            ))
        for tool, is_active in e3dtc_active_tool.items():
            out_file.write(GCodeFormats.G10.format(
                tool_id = str(tool),
                active_temp = int(ps_settings['extruder_temperature_layer0'][tool]),
                standby_temp = int(ps_settings['extruder_temperature_layer0'][tool]) - int(ps_settings['extruder_temperature_standby_delta'])
            ))
        for tool, is_active in e3dtc_active_tool.items():
            out_file.write(GCodeFormats.M116.format(
                tool_id = str(tool)
            ))
    if layer_num == 1:
        for tool, is_active in e3dtc_active_tool.items():
            out_file.write(GCodeFormats.G10.format(
                tool_id = str(tool),
                active_temp = int(ps_settings['extruder_temperature'][tool]),
                standby_temp = (int(ps_settings['extruder_temperature'][tool]) - int(ps_settings['extruder_temperature_standby_delta']))
            ))   
     
# Inject the code before the tool change 
def e3dtc_toolchange_pre(old_tool_id, new_tool_id, out_file):

    out_file.write("\n; - Tool-change PRE injection\n")

    # If other tool_id is enabled :
    # - disable inject old_tool_id Part Cooling Fan for T{old_tool_id}
    if old_tool_id != -1:
        out_file.write(GCodeFormats.M107)
   
# Inject the code after tool change 
def e3dtc_toolchange_post(tool_id, out_file):     
    global layer_num
     
    out_file.write("\n; - Tool-change POST injection\n")
    
    # Add primting 
    out_file.write(GCodeFormats.M120)
    out_file.write(GCodeFormats.M98.format(macro = "prime.g"))
    out_file.write(GCodeFormats.M121)
    
    # Enable fans after layer-n
    fan_id = "fan" + str(tool_id)
    if layer_num >= int(ps_settings['pcfan_disable_first_layers'][tool_id]):
        # Enable the fan
        fan_speed = float(ps_settings['pcfan_speed'][tool_id]) / 100.0
        out_file.write(GCodeFormats.M106.format(
            speed = fan_speed
        ))
        
    
     
# Check if it's a e3dtc-* command
# return False is not 
# else return following arguments in list format
def check_e3dtc_command(command, line):
    if len(line) > 1 and line[0] == ';':
        line = line[1:].strip()
        
        if line.startswith(command):
            return dict([(i.split('=')[0].strip(), i.split('=')[1].strip()) for i in line[len(command):].split(',')])
    return None           
     
# Check if it's a T code 
# return False is not 
# else return the Integer with the argument 
def check_gcode_T(line):
    if len(line) > 1 and line[0] == 'T':
        if line[1] != '-':
            # Get rid of any comments
            comment_npos = line.find(';')
            if comment_npos == -1:
                line = line[1:]
            else:
                line = line[1:comment_npos]
            return int(line)
    return None
  
# Fix M106 gcode - from percentage to 0..255 or 0.0-1.0
def check_gcode_M106(line):
    if len(line) > 1 and 'M106' in line:
        # get the values
        param_pos = line.find('S')
        value = float(line[param_pos+1:]) / 100.0
        return value
    return None
     
def main():
    if len(sys.argv) < 2:
        print("Usage: e3dtc-conv.py [filename.gcode]")
        return
        
    filename = sys.argv[1]
   
    # First pass to get the settings
    with open(filename, mode='r', encoding='utf8') as gcode_in:
        for line in gcode_in.readlines():
            line = line.strip()
            # Check if it's toolchange - to add the list of active tools
            gcode_T_id = check_gcode_T(line)
            if gcode_T_id != None:
                e3dtc_active_tool[gcode_T_id] = True
                continue
           
    print("------------------------------------")
    print("E3DTC used tools:")
    for k in e3dtc_active_tool.keys():
        print("Tool " + str(k) + " Active")
        
    # Second pass to Generate the file
    gcode_out = open(filename + ".tmp", mode='w', encoding='utf8')
    
    # current tool used
    current_tool_id = -1

    with open(filename, mode='r', encoding='utf8') as gcode_in:
        for line in gcode_in.readlines():
            line = line.strip()
            
            # 1) Check if the GCODE is to be omitted
            omit_line = False
            for code in gcode_omit:
                if line.find(code) != -1:
                    omit_line = True
            if omit_line:
                continue
            
            # 2) Process the e3dtc subcommands
            
            # e3dtc-layer-pre - get layer num
            
            opts = check_e3dtc_command('e3dtc-layer-pre:', line)
            if opts != None:
                e3dtc_layer_pre(opts, gcode_out)
                continue
            
            # is T{0} tool change, if layer_num = 0, inject priming code
            gcode_T_id = check_gcode_T(line)
            if gcode_T_id != None:
                # Write the Tool Change and inject code 
                e3dtc_toolchange_pre(current_tool_id, gcode_T_id, gcode_out)
                gcode_out.write(line + "\n")
                e3dtc_toolchange_post(gcode_T_id, gcode_out)
                
                # Change the tool to T{id}
                current_tool_id = gcode_T_id
                
                continue
 
            # is M106 - fix it 
            pcf_speed = check_gcode_M106(line)
            if pcf_speed != None:
                gcode_out.write(GCodeFormats.M106.format(
                    speed = pcf_speed
                ))
                
                continue
 
            # Z) Any other entry - just write to output file
            gcode_out.write(line + "\n")
            
    gcode_out.close()

    # delete and rename
    os.remove(filename)
    os.rename(filename + ".tmp", filename)
    
# Main loop
main()

    
